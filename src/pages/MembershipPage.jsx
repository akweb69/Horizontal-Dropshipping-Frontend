import React, { useState } from 'react';
import { Helmet } from 'react-helmet';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { useAuth } from '@/context/AuthContext';
import { useNavigate } from 'react-router-dom';
import { toast } from '@/components/ui/use-toast';
import { CheckCircle, Star, Package, Truck, Zap, Gift, Copy, X } from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

const MembershipPlan = ({ plan, onBuyNow }) => (
    <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className={`bg-white rounded-xl shadow-lg p-8 border-2 ${plan.recommended ? 'border-orange-500' : 'border-transparent'}`}
    >
        {plan.recommended && (
            <div className="text-center mb-4">
                <span className="bg-orange-500 text-white text-xs font-bold px-3 py-1 rounded-full">рж╕ржмржЪрзЗрзЯрзЗ ржЬржиржкрзНрж░рж┐рзЯ</span>
            </div>
        )}
        <h2 className="text-2xl font-bold text-gray-800 text-center">{plan.name}</h2>
        <p className="text-4xl font-extrabold text-gray-900 text-center my-4">рз│{plan.price}<span className="text-lg font-normal text-gray-500">/ржмржЫрж░</span></p>
        <ul className="space-y-3 mb-8">
            {plan.benefits.map((benefit, index) => (
                <li key={index} className="flex items-center gap-3">
                    <CheckCircle className="w-5 h-5 text-green-500" />
                    <span className="text-gray-700">{benefit}</span>
                </li>
            ))}
        </ul>
        <Button onClick={() => onBuyNow(plan)} size="lg" className="w-full">
            ржПржЦржирж┐ ржХрж┐ржирзБржи
        </Button>
    </motion.div>
);

const MembershipPage = () => {
    const { isAuthenticated, user, becomeMember } = useAuth();
    const navigate = useNavigate();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedPlan, setSelectedPlan] = useState(null);
    const [paymentMethod, setPaymentMethod] = useState('');
    const [transactionId, setTransactionId] = useState('');
    const [paymentNumber, setPaymentNumber] = useState('');
    const [amount, setAmount] = useState('');
    const [isLoading, setIsLoading] = useState(false);

    const sendNumber = '01768037870';

    const plans = [
        { name: 'ржмрзЗрж╕рж┐ржХ ржорзЗржорзНржмрж╛рж░', price: 'рзкрзпрзп', benefits: ['рж╕ржХрж▓ ржкржгрзНржпрзЗрж░ ржжрж╛ржо ржжрзЗржЦрзБржи', 'рж╕рж╛ржзрж╛рж░ржг ржЧрзНрж░рж╛рж╣ржХ рж╕рж╛ржкрзЛрж░рзНржЯ', 'ржорж╛рж╕рж┐ржХ ржирж┐ржЙржЬрж▓рзЗржЯрж╛рж░'], recommended: false },
        { name: 'ржкрзНрж░рзЛ рж╕рзЗрж▓рж╛рж░', price: 'рзпрзпрзп', benefits: ['рж╕ржХрж▓ ржмрзЗрж╕рж┐ржХ рж╕рзБржмрж┐ржзрж╛', 'ржЕржЧрзНрж░рж╛ржзрж┐ржХрж╛рж░ ржЧрзНрж░рж╛рж╣ржХ рж╕рж╛ржкрзЛрж░рзНржЯ', 'ржмрж┐рж╢рзЗрж╖ ржбрж┐рж╕ржХрж╛ржЙржирзНржЯ', 'рж╕рж╛ржкрзНрждрж╛рж╣рж┐ржХ ржмрж┐ржХрзНрж░рзЯ рж░рж┐ржкрзЛрж░рзНржЯ'], recommended: true },
        { name: 'ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо ржкрж╛рж░рзНржЯржирж╛рж░', price: 'рззрзпрзпрзп', benefits: ['рж╕ржХрж▓ ржкрзНрж░рзЛ рж╕рзБржмрж┐ржзрж╛', 'ржбрзЗржбрж┐ржХрзЗржЯрзЗржб ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржорзНржпрж╛ржирзЗржЬрж╛рж░', 'ржирждрзБржи ржкржгрзНржпрзЗ ржЖрж░рзНрж▓рж┐ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕', 'ржлрзНрж░рж┐ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ (рж╢рж░рзНржд ржкрзНрж░ржпрзЛржЬрзНржп)'], recommended: false },
    ];

    const handleBuyNow = (plan) => {
        if (!isAuthenticated) {
            navigate('/login?redirect=/membership');
        } else {
            setSelectedPlan(plan);
            setAmount(plan.price);
            setIsModalOpen(true);
        }
    };

    const copyPaymentNumber = () => {
        navigator.clipboard.writeText(sendNumber);
        toast({
            title: "тЬЕ ржкрзЗржорзЗржирзНржЯ ржирж╛ржорзНржмрж╛рж░ ржХржкрж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!",
            description: `ржирж╛ржорзНржмрж╛рж░: ${sendNumber}`,
        });
    };

    const handlePaymentSubmit = async () => {
        if (!paymentMethod || !transactionId || !amount) {
            toast({
                title: "тЭМ рждрзНрж░рзБржЯрж┐",
                description: "рж╕ржХрж▓ ржлрж┐рж▓рзНржб ржкрзВрж░ржг ржХрж░рзБржи",
                variant: "destructive"
            });
            return;
        }

        setIsLoading(true);
        try {
            const paymentData = {
                email: user.email,
                planName: selectedPlan.name,
                amount: amount,
                paymentMethod: paymentMethod,
                transactionId: transactionId,
                paymentNumber: paymentNumber,
                timestamp: new Date().toISOString(),
                packageStatus: 'pending'
            };

            const response = await fetch(`${import.meta.env.VITE_BASE_URL}/buy-package`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(paymentData),
            });

            if (response.ok) {
                becomeMember();
                toast({
                    title: `ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи, ${user.name}!`,
                    description: `ржЖржкржирж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ "${selectedPlan.name}" ржкрзНрж▓рзНржпрж╛ржиржЯрж┐ ржХрж┐ржирзЗржЫрзЗржиред`,
                });
                setIsModalOpen(false);
                setPaymentMethod('');
                setTransactionId('');
                setAmount('');
            } else {
                throw new Error('Payment submission failed');
            }
        } catch (error) {
            toast({
                title: "тЭМ ржкрзЗржорзЗржирзНржЯ ржмрзНржпрж░рзНрже",
                description: "ржжрзЯрж╛ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи ржЕржержмрж╛ рж╕рж╛ржкрзЛрж░рзНржЯ ржЯрж┐ржорзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи",
                variant: "destructive"
            });
        } finally {
            setIsLoading(false);
        }
    };

    const copyReferralLink = () => {
        navigator.clipboard.writeText(`https://letsdropship.com/signup?ref=${user.referralCode}`);
        toast({
            title: "тЬЕ рж▓рж┐ржЩрзНржХ ржХржкрж┐ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!",
            description: "ржЖржкржирж╛рж░ ржмржирзНржзрзБржжрзЗрж░ рж╕рж╛ржерзЗ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХ рж╢рзЗрзЯрж╛рж░ ржХрж░рзБржиред",
        });
    };

    return (
        <>
            <Helmet>
                <title>ржорзЗржорзНржмрж╛рж░рж╢рж┐ржк - LetsDropship</title>
                <meta name="description" content="ржЖржорж╛ржжрзЗрж░ ржорзЗржорзНржмрж╛рж░ рж╣рзЯрзЗ ржмрж┐рж╢рзЗрж╖ рж╕рзБржмрж┐ржзрж╛ ржЙржкржнрзЛржЧ ржХрж░рзБржи ржПржмржВ рж╕ржХрж▓ ржкржгрзНржпрзЗрж░ ржжрж╛ржо ржжрзЗржЦрзБржиред" />
            </Helmet>
            <div className="bg-slate-50 py-16">
                <div className="max-w-6xl mx-auto px-4">
                    <motion.div
                        initial={{ opacity: 0, y: -20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.5 }}
                        className="text-center mb-12"
                    >
                        <h1 className="text-4xl md:text-5xl font-bold text-gray-800">ржЖржорж╛ржжрзЗрж░ ржПржХрзНрж╕ржХрзНрж▓рзБрж╕рж┐ржн ржорзЗржорзНржмрж╛рж░ рж╣рзЛржи</h1>
                        <p className="mt-4 text-lg text-gray-600 max-w-3xl mx-auto">ржмрж┐рж╢рзЗрж╖ рж╕рзБржмрж┐ржзрж╛, рж╕рзЗрж░рж╛ ржбрж┐рж▓ ржПржмржВ ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛рж░ ржкрзНрж░рж╕рж╛рж░рзЗ ржкрзНрж░рзЯрзЛржЬржирзАрзЯ рж╕ржХрж▓ ржЯрзБрж▓рж╕ ржкрзЗрждрзЗ ржЖржЬржЗ ржЖржорж╛ржжрзЗрж░ ржорзЗржорзНржмрж╛рж░рж╢рж┐ржк ржЧрзНрж░рж╣ржг ржХрж░рзБржиред</p>
                    </motion.div>

                    <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16">
                        {plans.map((plan, index) => (
                            <MembershipPlan key={index} plan={plan} onBuyNow={handleBuyNow} />
                        ))}
                    </div>

                    <div className="grid md:grid-cols-2 gap-12 items-center mb-16">
                        <div>
                            <h2 className="text-3xl font-bold text-gray-800 mb-4">ржХрзЗржи ржорзЗржорзНржмрж╛рж░ рж╣ржмрзЗржи?</h2>
                            <p className="text-gray-600 mb-6">ржЖржорж╛ржжрзЗрж░ ржорзЗржорзНржмрж╛рж░рж╢рж┐ржк рж╢рзБржзрзБ ржПржХржЯрж┐ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржирзЯ, ржПржЯрж┐ ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛рж░ рж╕рж╛ржлрж▓рзНржпрзЗрж░ ржЪрж╛ржмрж┐ржХрж╛ржарж┐ред ржЖржорж░рж╛ ржЖржкржирж╛ржХрзЗ ржПржоржи рж╕ржм ржЯрзБрж▓рж╕ ржПржмржВ рж╕рзБржмрж┐ржзрж╛ ржжрж┐ржЗ ржпрж╛ ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛ржХрзЗ ржкрж░ржмрж░рзНрждрзА рж╕рзНрждрж░рзЗ ржирж┐ржпрж╝рзЗ ржпрзЗрждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░ржмрзЗред</p>
                            <div className="space-y-4">
                                <div className="flex items-start gap-4"><Star className="w-6 h-6 text-yellow-500 mt-1 shrink-0" /><div><h3 className="font-semibold">рж╕рзЗрж░рж╛ ржорзВрж▓рзНржп</h3><p className="text-gray-600">рж╕ржжрж╕рзНржпрж░рж╛ ржкрж╛ржЗржХрж╛рж░рж┐ ржорзВрж▓рзНржпрзЗ ржкржгрзНржп ржХрзЗржирж╛рж░ рж╕рзБржпрзЛржЧ ржкрж╛ржи, ржпрж╛ ржЖржкржирж╛рж░ рж▓рж╛ржнрзЗрж░ ржорж╛рж░рзНржЬрж┐ржи ржмрж╛рзЬрж╛рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзЗред</p></div></div>
                                <div className="flex items-start gap-4"><Package className="w-6 h-6 text-blue-500 mt-1 shrink-0" /><div><h3 className="font-semibold">ржПржХрзНрж╕ржХрзНрж▓рзБрж╕рж┐ржн ржкржгрзНржп</h3><p className="text-gray-600">рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕ржжрж╕рзНржпржжрзЗрж░ ржЬржирзНржп рж╕ржВрж░ржХрзНрж╖рж┐ржд ржЯрзНрж░рзЗржирзНржбрж┐ржВ ржПржмржВ ржЙржЪрзНржЪ-ржЪрж╛рж╣рж┐ржжрж╛рж░ ржкржгрзНржпржЧрзБрж▓рж┐рждрзЗ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржкрж╛ржиред</p></div></div>
                                <div className="flex items-start gap-4"><Truck className="w-6 h-6 text-green-500 mt-1 shrink-0" /><div><h3 className="font-semibold">ржжрзНрж░рзБржд ржбрзЗрж▓рж┐ржнрж╛рж░рж┐</h3><p className="text-gray-600">ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ржЧрзБрж▓рж┐ ржЕржЧрзНрж░рж╛ржзрж┐ржХрж╛рж░ ржнрж┐рждрзНрждрж┐рждрзЗ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣рзЯ, ржпрж╛ ржЧрзНрж░рж╛рж╣ржХ рж╕ржирзНрждрзБрж╖рзНржЯрж┐ ржмрж╛рзЬрж╛рзЯред</p></div></div>
                            </div>
                        </div>
                        <div>
                            <img alt="ржПржХржЬржи ржмрзНржпржХрзНрждрж┐ рж▓рзНржпрж╛ржкржЯржкрзЗ ржХрж╛ржЬ ржХрж░ржЫрзЗржи" className="rounded-xl shadow-lg" src="https://images.unsplash.com/photo-1516321318423-f06f85e504b3" />
                        </div>
                    </div>

                    {isAuthenticated && user && (
                        <motion.div
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            className="bg-white rounded-xl shadow-lg p-8 text-center"
                        >
                            <Gift className="w-12 h-12 text-orange-500 mx-auto mb-4" />
                            <h2 className="text-2xl font-bold text-gray-800">ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХ рж╢рзЗрзЯрж╛рж░ ржХрж░рзБржи</h2>
                            <p className="text-gray-600 mt-2 mb-6">ржЖржкржирж╛рж░ ржмржирзНржзрзБржжрзЗрж░ рж░рзЗржлрж╛рж░ ржХрж░рзЗ ржЖрзЯ ржХрж░рзБржи! ржЖржкржирж╛рж░ рж▓рж┐ржЩрзНржХ ржерзЗржХрзЗ ржХрзЗржЙ рж╕рж╛ржЗржи ржЖржк ржХрж░рж▓рзЗ ржЖржкржирж┐ ржкрж╛ржмрзЗржи ржЖржХрж░рзНрж╖ржгрзАрзЯ ржмрзЛржирж╛рж╕ред</p>
                            <div className="flex justify-center">
                                <div className="relative w-full max-w-md">
                                    <input
                                        type="text"
                                        value={`https://letsdropship.com/signup?ref=${user.referralCode}`}
                                        readOnly
                                        className="w-full bg-slate-100 border border-gray-300 rounded-lg py-3 pl-4 pr-12 text-gray-700"
                                    />
                                    <Button onClick={copyReferralLink} size="icon" className="absolute right-2 top-1/2 -translate-y-1/2">
                                        <Copy className="w-5 h-5" />
                                    </Button>
                                </div>
                            </div>
                        </motion.div>
                    )}
                </div>
            </div>

            <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
                <DialogContent className="sm:max-w-[425px]">
                    <DialogHeader>
                        <DialogTitle>ржкрзЗржорзЗржирзНржЯ рж╕ржорзНржкржирзНржи ржХрж░рзБржи</DialogTitle>
                    </DialogHeader>
                    <div className="grid gap-4 py-4">
                        <div className="flex items-center justify-between">
                            <div>
                                <h3 className="font-semibold">ржкрзЗржорзЗржирзНржЯ ржирж╛ржорзНржмрж╛рж░: {sendNumber}</h3>
                                <p className="text-sm text-gray-600">ржПржЗ ржирж╛ржорзНржмрж╛рж░рзЗ ржкрзЗржорзЗржирзНржЯ ржкрж╛ржарж╛ржи - рж╕рзЗржирзНржб ржорж╛ржирж┐ ржХрж░рждрзЗ рж╣ржмрзЗред</p>
                            </div>
                            <Button onClick={copyPaymentNumber} size="sm">
                                <Copy className="w-4 h-4 mr-2" /> ржХржкрж┐
                            </Button>
                        </div>
                        <div className="grid gap-2">
                            <Label htmlFor="plan">ржкрзНрж▓рзНржпрж╛ржи</Label>
                            <Input id="plan" value={selectedPlan?.name} readOnly />
                        </div>
                        <div className="grid gap-2">
                            <Label htmlFor="amount">ржкрж░рж┐ржорж╛ржг</Label>
                            <Input id="amount" value={amount} readOnly />
                        </div>
                        <div className="grid gap-2">
                            <Label htmlFor="paymentMethod">ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐</Label>
                            <select
                                id="paymentMethod"
                                value={paymentMethod}
                                onChange={(e) => setPaymentMethod(e.target.value)}
                                className="w-full border border-gray-300 rounded-lg py-3 px-4 text-gray-700 focus:outline-none focus:ring-2 focus:ring-orange-500"
                            >
                                <option value="">ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи</option>
                                <option value="bKash">bKash</option>
                                <option value="Nagad">Nagad</option>
                            </select>
                        </div>
                        <div className="grid gap-2">
                            <Label htmlFor="transactionId">ржЖржкржирж╛рж░ ржкрзЗржорзЗржирзНржЯ ржирж╛ржорзНржмрж╛рж░ рж▓рж┐ржЦрзБржи</Label>
                            <Input
                                id="transactionId"
                                value={paymentNumber}
                                onChange={(e) => setPaymentNumber(e.target.value)}
                                placeholder="ржЖржкржирж╛рж░ ржкрзЗржорзЗржирзНржЯ ржирж╛ржорзНржмрж╛рж░ рж▓рж┐ржЦрзБржи"
                            />
                        </div>
                        <div className="grid gap-2">
                            <Label htmlFor="transactionId">ржЯрзНрж░рж╛ржиржЬрзЗржХрж╢ржи ржЖржЗржбрж┐</Label>
                            <Input
                                id="transactionId"
                                value={transactionId}
                                onChange={(e) => setTransactionId(e.target.value)}
                                placeholder="ржЯрзНрж░рж╛ржиржЬрзЗржХрж╢ржи ржЖржЗржбрж┐ рж▓рж┐ржЦрзБржи"
                            />
                        </div>
                    </div>
                    <DialogFooter>
                        <Button variant="outline" onClick={() => setIsModalOpen(false)}>
                            ржмрж╛рждрж┐рж▓
                        </Button>
                        <Button onClick={handlePaymentSubmit} disabled={isLoading}>
                            {isLoading ? 'ржкрзНрж░рж╕рзЗрж╕рж┐ржВ...' : 'ржкрзЗржорзЗржирзНржЯ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи'}
                        </Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </>
    );
};

export default MembershipPage;