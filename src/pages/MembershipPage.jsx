import React, { useEffect, useState } from 'react';
import { Helmet } from 'react-helmet';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { useAuth } from '@/context/AuthContext';
import { useNavigate } from 'react-router-dom';
import { toast } from '@/components/ui/use-toast';
import { CheckCircle, Star, Package, Truck, Zap, Gift, Copy, X } from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import axios from 'axios';

const MembershipPlan = ({ plan, onBuyNow }) => (
    <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className={`bg-white rounded-xl shadow-lg p-8 border-2 ${plan.recommended ? 'border-orange-500 ring-2 ring-orange-200' : 'border-gray-200'}`}
    >
        {plan.recommended && (
            <div className="text-center mb-4">
                <span className="bg-orange-500 text-white text-xs font-bold px-3 py-1 rounded-full">‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡ßü</span>
            </div>
        )}
        <h2 className="text-2xl font-bold text-gray-800 text-center">{plan.name}</h2>
        <p className="text-4xl font-extrabold text-gray-900 text-center my-4">
            ‡ß≥{plan.price}<span className="text-lg font-normal text-gray-500">/‡¶¨‡¶õ‡¶∞</span>
        </p>
        <ul className="space-y-3 mb-8">
            {plan.benefits.map((benefit, index) => (
                <li key={index} className="flex items-center gap-3">
                    <CheckCircle className="w-5 h-5 text-green-500 flex-shrink-0" />
                    <span className="text-gray-700">{benefit}</span>
                </li>
            ))}
        </ul>
        <Button onClick={() => onBuyNow(plan)} size="lg" className="w-full">
            ‡¶è‡¶ñ‡¶®‡¶ø ‡¶ï‡¶ø‡¶®‡ßÅ‡¶®
        </Button>
    </motion.div>
);

const MembershipPage = () => {
    const { isAuthenticated, user, becomeMember } = useAuth();
    const navigate = useNavigate();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedPlan, setSelectedPlan] = useState(null);
    const [paymentMethod, setPaymentMethod] = useState('');
    const [transactionId, setTransactionId] = useState('');
    const [paymentNumber, setPaymentNumber] = useState('');
    const [amount, setAmount] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isPaymentInfoLoading, setIsPaymentInfoLoading] = useState(true);
    const [adminPaymentNumber, setAdminPaymentNumber] = useState(null);

    useEffect(() => {
        fetchPaymentNumbers();
    }, []);

    const fetchPaymentNumbers = async () => {
        setIsPaymentInfoLoading(true);
        try {
            const response = await axios.get(`${import.meta.env.VITE_BASE_URL}/payment-number`);
            if (response.data && response.data.length > 0) {
                setAdminPaymentNumber(response.data[0]);
            } else {
                throw new Error('No payment info found');
            }
        } catch (error) {
            console.error('Payment number fetch error:', error);
            toast({
                title: "‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
                description: "‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                variant: "destructive"
            });
        } finally {
            setIsPaymentInfoLoading(false);
        }
    };

    const plans = [
        {
            name: '‡¶¨‡ßá‡¶∏‡¶ø‡¶ï ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞',
            price: '‡ß™‡ßØ‡ßØ',
            benefits: [
                '‡¶∏‡¶ï‡¶≤ ‡¶™‡¶£‡ßç‡¶Ø‡ßá‡¶∞ ‡¶¶‡¶æ‡¶Æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®',
                '‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü',
                '‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶®‡¶ø‡¶â‡¶ú‡¶≤‡ßá‡¶ü‡¶æ‡¶∞'
            ],
            recommended: false
        },
        {
            name: '‡¶™‡ßç‡¶∞‡ßã ‡¶∏‡ßá‡¶≤‡¶æ‡¶∞',
            price: '‡ßØ‡ßØ‡ßØ',
            benefits: [
                '‡¶∏‡¶ï‡¶≤ ‡¶¨‡ßá‡¶∏‡¶ø‡¶ï ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ',
                '‡¶Ö‡¶ó‡ßç‡¶∞‡¶æ‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü',
                '‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶°‡¶ø‡¶∏‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü',
                '‡¶∏‡¶æ‡¶™‡ßç‡¶§‡¶æ‡¶π‡¶ø‡¶ï ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡ßü ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü'
            ],
            recommended: true
        },
        {
            name: '‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶®‡¶æ‡¶∞',
            price: '‡ßß‡ßØ‡ßØ‡ßØ',
            benefits: [
                '‡¶∏‡¶ï‡¶≤ ‡¶™‡ßç‡¶∞‡ßã ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ',
                '‡¶°‡ßá‡¶°‡¶ø‡¶ï‡ßá‡¶ü‡ßá‡¶° ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞',
                '‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶£‡ßç‡¶Ø‡ßá ‡¶Ü‡¶∞‡ßç‡¶≤‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏',
                '‡¶´‡ßç‡¶∞‡¶ø ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø (‡¶∂‡¶∞‡ßç‡¶§ ‡¶™‡ßç‡¶∞‡¶Ø‡ßã‡¶ú‡ßç‡¶Ø)'
            ],
            recommended: false
        },
    ];

    const handleBuyNow = (plan) => {
        if (!isAuthenticated) {
            navigate('/login?redirect=/membership');
            return;
        }

        if (!adminPaymentNumber) {
            toast({
                title: "‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
                description: "‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                variant: "destructive"
            });
            return;
        }

        setSelectedPlan(plan);
        setAmount(plan.price);
        setPaymentMethod('');
        setTransactionId('');
        setPaymentNumber('');
        setIsModalOpen(true);
    };

    const copyPaymentNumber = () => {
        if (!adminPaymentNumber || !paymentMethod) {
            toast({
                title: "‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
                description: "‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
                variant: "destructive"
            });
            return;
        }

        const numberToCopy = paymentMethod === 'bKash'
            ? adminPaymentNumber.bkashNumber
            : adminPaymentNumber.nagadNumber;

        navigator.clipboard.writeText(numberToCopy).then(() => {
            toast({
                title: "‚úÖ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!",
                description: `${paymentMethod}: ${numberToCopy}`,
            });
        }).catch(err => {
            console.error('Failed to copy:', err);
            toast({
                title: "‚ùå ‡¶ï‡¶™‡¶ø ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•",
                description: "‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®",
                variant: "destructive"
            });
        });
    };

    const handlePaymentSubmit = async () => {
        // Validation
        if (!paymentMethod || !transactionId || !paymentNumber || !amount) {
            toast({
                title: "‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
                description: "‡¶∏‡¶ï‡¶≤ ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®",
                variant: "destructive"
            });
            return;
        }

        if (transactionId.length < 8) {
            toast({
                title: "‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
                description: "‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶Ø‡¶º (‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ßÆ ‡¶Ö‡¶ô‡ßç‡¶ï)",
                variant: "destructive"
            });
            return;
        }

        setIsLoading(true);
        try {
            const paymentData = {
                email: user.email,
                planName: selectedPlan.name,
                amount: amount,
                paymentMethod: paymentMethod,
                transactionId: transactionId,
                paymentNumber: paymentNumber,
                timestamp: new Date().toISOString(),
                packageStatus: 'pending'
            };

            const response = await fetch(`${import.meta.env.VITE_BASE_URL}/buy-package`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    // Add auth header if needed
                    // 'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(paymentData),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.message || 'Payment submission failed');
            }

            await becomeMember();
            toast({
                title: `üéâ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®, ${user.name}!`,
                description: `‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá "${selectedPlan.name}" ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡¶ü‡¶ø ‡¶ï‡¶ø‡¶®‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶¨‡•§`,
            });

            // Reset form and close modal
            handleCloseModal();

            // Optionally redirect or refresh
            // navigate('/dashboard');

        } catch (error) {
            console.error('Payment error:', error);
            toast({
                title: "‚ùå ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•",
                description: error.message || "‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ü‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®",
                variant: "destructive"
            });
        } finally {
            setIsLoading(false);
        }
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setPaymentMethod('');
        setTransactionId('');
        setPaymentNumber('');
        setAmount('');
        setSelectedPlan(null);
    };

    const copyReferralLink = () => {
        if (!user?.myReferralCode) {
            toast({
                title: "‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
                description: "‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶ï‡ßã‡¶° ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡¶®‡¶ø",
                variant: "destructive"
            });
            return;
        }

        const referralUrl = `https://letsdropship.com/signup?ref=${user.myReferralCode}`;
        navigator.clipboard.writeText(referralUrl).then(() => {
            toast({
                title: "‚úÖ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!",
                description: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶™‡¶æ‡¶®!",
            });
        }).catch(err => {
            console.error('Failed to copy referral link:', err);
        });
    };

    const getPaymentNumberForMethod = () => {
        if (!adminPaymentNumber || !paymentMethod) return '';
        return paymentMethod === 'bKash'
            ? adminPaymentNumber.bkashNumber
            : adminPaymentNumber.nagadNumber;
    };

    return (
        <>
            <Helmet>
                <title>‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ - LetsDropship</title>
                <meta name="description" content="‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶π‡ßü‡ßá ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ ‡¶â‡¶™‡¶≠‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶ï‡¶≤ ‡¶™‡¶£‡ßç‡¶Ø‡ßá‡¶∞ ‡¶¶‡¶æ‡¶Æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§" />
            </Helmet>

            <div className="bg-slate-50 py-16">
                <div className="max-w-6xl mx-auto px-4">
                    <motion.div
                        initial={{ opacity: 0, y: -20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.5 }}
                        className="text-center mb-12"
                    >
                        <h1 className="text-4xl md:text-5xl font-bold text-gray-800 mb-6">
                            ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶è‡¶ï‡ßç‡¶∏‡¶ï‡ßç‡¶≤‡ßÅ‡¶∏‡¶ø‡¶≠ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶π‡ßã‡¶®
                        </h1>
                        <p className="text-lg text-gray-600 max-w-3xl mx-auto">
                            ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ, ‡¶∏‡ßá‡¶∞‡¶æ ‡¶°‡¶ø‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡¶æ‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶∏‡¶ï‡¶≤ ‡¶ü‡ßÅ‡¶≤‡¶∏ ‡¶™‡ßá‡¶§‡ßá
                            ‡¶Ü‡¶ú‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
                        </p>
                    </motion.div>

                    <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16">
                        {plans.map((plan, index) => (
                            <MembershipPlan key={index} plan={plan} onBuyNow={handleBuyNow} />
                        ))}
                    </div>

                    <div className="grid md:grid-cols-2 gap-12 items-center mb-16">
                        <div>
                            <h2 className="text-3xl font-bold text-gray-800 mb-4">‡¶ï‡ßá‡¶® ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶π‡¶¨‡ßá‡¶®?</h2>
                            <p className="text-gray-600 mb-6">
                                ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶®‡ßü, ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶´‡¶≤‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ö‡¶æ‡¶¨‡¶ø‡¶ï‡¶æ‡¶†‡¶ø‡•§
                                ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶è‡¶Æ‡¶® ‡¶∏‡¶¨ ‡¶ü‡ßÅ‡¶≤‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ ‡¶¶‡¶ø‡¶á ‡¶Ø‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶ï‡ßá ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶∏‡ßç‡¶§‡¶∞‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡ßá‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶¨‡ßá‡•§
                            </p>
                            <div className="space-y-4">
                                <div className="flex items-start gap-4">
                                    <Star className="w-6 h-6 text-yellow-500 mt-1 flex-shrink-0" />
                                    <div>
                                        <h3 className="font-semibold">‡¶∏‡ßá‡¶∞‡¶æ ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø</h3>
                                        <p className="text-gray-600 text-sm">
                                            ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡¶∞‡¶æ ‡¶™‡¶æ‡¶á‡¶ï‡¶æ‡¶∞‡¶ø ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡ßá ‡¶™‡¶£‡ßç‡¶Ø ‡¶ï‡ßá‡¶®‡¶æ‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶™‡¶æ‡¶®, ‡¶Ø‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶æ‡¶≠‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ú‡¶ø‡¶® ‡¶¨‡¶æ‡ßú‡¶æ‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá‡•§
                                        </p>
                                    </div>
                                </div>
                                <div className="flex items-start gap-4">
                                    <Package className="w-6 h-6 text-blue-500 mt-1 flex-shrink-0" />
                                    <div>
                                        <h3 className="font-semibold">‡¶è‡¶ï‡ßç‡¶∏‡¶ï‡ßç‡¶≤‡ßÅ‡¶∏‡¶ø‡¶≠ ‡¶™‡¶£‡ßç‡¶Ø</h3>
                                        <p className="text-gray-600 text-sm">
                                            ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶è‡¶¨‡¶Ç ‡¶â‡¶ö‡ßç‡¶ö-‡¶ö‡¶æ‡¶π‡¶ø‡¶¶‡¶æ‡¶∞ ‡¶™‡¶£‡ßç‡¶Ø‡¶ó‡ßÅ‡¶≤‡¶ø‡¶§‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶™‡¶æ‡¶®‡•§
                                        </p>
                                    </div>
                                </div>
                                <div className="flex items-start gap-4">
                                    <Truck className="w-6 h-6 text-green-500 mt-1 flex-shrink-0" />
                                    <div>
                                        <h3 className="font-semibold">‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø</h3>
                                        <p className="text-gray-600 text-sm">
                                            ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶Ö‡¶ó‡ßç‡¶∞‡¶æ‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü, ‡¶Ø‡¶æ ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶∏‡¶®‡ßç‡¶§‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø ‡¶¨‡¶æ‡ßú‡¶æ‡ßü‡•§
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div className="relative">
                            <img
                                alt="‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø ‡¶≤‡ßç‡¶Ø‡¶æ‡¶™‡¶ü‡¶™‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá‡¶®"
                                className="rounded-xl shadow-lg w-full h-auto"
                                src="https://images.unsplash.com/photo-1516321318423-f06f85e504b3?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
                                loading="lazy"
                            />
                        </div>
                    </div>

                    {isAuthenticated && user?.myReferralCode && (
                        <motion.div
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            className="bg-white rounded-xl shadow-lg p-8 text-center"
                        >
                            <Gift className="w-12 h-12 text-orange-500 mx-auto mb-4" />
                            <h2 className="text-2xl font-bold text-gray-800 mb-2">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®</h2>
                            <p className="text-gray-600 mb-6">
                                ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ü‡ßü ‡¶ï‡¶∞‡ßÅ‡¶®! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßá‡¶â ‡¶∏‡¶æ‡¶á‡¶® ‡¶Ü‡¶™ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡¶æ‡¶¨‡ßá‡¶® ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡ßü ‡¶¨‡ßã‡¶®‡¶æ‡¶∏‡•§
                            </p>
                            <div className="flex justify-center">
                                <div className="relative w-full max-w-md">
                                    <input
                                        type="text"
                                        value={`https://letsdropship.com/signup?ref=${user.myReferralCode}`}
                                        readOnly
                                        className="w-full bg-slate-100 border border-gray-300 rounded-lg py-3 pl-4 pr-12 text-gray-700 focus:outline-none"
                                    />
                                    <Button
                                        onClick={copyReferralLink}
                                        size="icon"
                                        className="absolute right-2 top-1/2 -translate-y-1/2 bg-blue-500 hover:bg-blue-600"
                                    >
                                        <Copy className="w-5 h-5" />
                                    </Button>
                                </div>
                            </div>
                        </motion.div>
                    )}
                </div>
            </div>

            <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
                <DialogContent className="sm:max-w-md max-h-[90vh] overflow-y-auto">
                    <DialogHeader>
                        <DialogTitle className="text-xl">‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</DialogTitle>
                    </DialogHeader>

                    <div className="space-y-4 py-4">
                        {/* Payment Numbers Section */}
                        <div className="bg-gray-50 p-4 rounded-lg">
                            <h3 className="font-semibold mb-2 text-gray-800">‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞:</h3>
                            {isPaymentInfoLoading ? (
                                <div className="text-center py-4">‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</div>
                            ) : adminPaymentNumber ? (
                                <>
                                    <div className="flex items-center justify-between py-2 border-b">
                                        <span className="text-sm">‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂:</span>
                                        <div className="flex items-center gap-2">
                                            <span className="font-mono text-sm">{adminPaymentNumber.bkashNumber}</span>
                                            <Button
                                                type="button"
                                                size="sm"
                                                variant="ghost"
                                                onClick={() => navigator.clipboard.writeText(adminPaymentNumber.bkashNumber)}
                                                className="h-6 w-6 p-0"
                                            >
                                                <Copy className="w-3 h-3" />
                                            </Button>
                                        </div>
                                    </div>
                                    <div className="flex items-center justify-between py-2">
                                        <span className="text-sm">‡¶®‡¶ó‡¶¶:</span>
                                        <div className="flex items-center gap-2">
                                            <span className="font-mono text-sm">{adminPaymentNumber.nagadNumber}</span>
                                            <Button
                                                type="button"
                                                size="sm"
                                                variant="ghost"
                                                onClick={() => navigator.clipboard.writeText(adminPaymentNumber.nagadNumber)}
                                                className="h-6 w-6 p-0"
                                            >
                                                <Copy className="w-3 h-3" />
                                            </Button>
                                        </div>
                                    </div>
                                    <p className="text-xs text-gray-500 mt-2">
                                        üì± "Send Money" ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
                                    </p>
                                </>
                            ) : (
                                <div className="text-red-500 text-sm">‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø</div>
                            )}
                        </div>

                        <div className="grid gap-2">
                            <Label htmlFor="plan">‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶®</Label>
                            <Input id="plan" value={selectedPlan?.name || ''} readOnly className="bg-gray-50" />
                        </div>

                        <div className="grid gap-2">
                            <Label htmlFor="amount">‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£</Label>
                            <Input id="amount" value={`‡ß≥${amount}`} readOnly className="bg-gray-50" />
                        </div>

                        <div className="grid gap-2">
                            <Label htmlFor="paymentMethod">‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø</Label>
                            <select
                                id="paymentMethod"
                                value={paymentMethod}
                                onChange={(e) => setPaymentMethod(e.target.value)}
                                className="w-full border border-gray-300 rounded-lg py-3 px-4 text-gray-700 focus:outline-none focus:ring-2 focus:ring-orange-500 bg-white"
                                disabled={isPaymentInfoLoading}
                            >
                                <option value="">‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</option>
                                <option value="bKash">bKash</option>
                                <option value="Nagad">Nagad</option>
                            </select>
                            {paymentMethod && (
                                <Button
                                    type="button"
                                    variant="outline"
                                    size="sm"
                                    onClick={copyPaymentNumber}
                                    className="mt-1"
                                    disabled={!adminPaymentNumber}
                                >
                                    üìã ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
                                </Button>
                            )}
                        </div>

                        <div className="grid gap-2">
                            <Label htmlFor="paymentRef">‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞</Label>
                            <Input
                                id="paymentRef"
                                value={paymentNumber}
                                onChange={(e) => setPaymentNumber(e.target.value)}
                                placeholder="Send Money ‡¶è‡¶∞ ‡¶™‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞"
                                className="text-sm"
                            />
                            <p className="text-xs text-gray-500">
                                Send Money ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®
                            </p>
                        </div>

                        <div className="grid gap-2">
                            <Label htmlFor="transactionId">‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø</Label>
                            <Input
                                id="transactionId"
                                value={transactionId}
                                onChange={(e) => setTransactionId(e.target.value)}
                                placeholder="‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø (‡ßß‡ß¨ ‡¶Ö‡¶ô‡ßç‡¶ï‡ßá‡¶∞)"
                                className="text-sm"
                            />
                            <p className="text-xs text-gray-500">
                                bKash/Nagad ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡ßß‡ß¨ ‡¶Ö‡¶ô‡ßç‡¶ï‡ßá‡¶∞ ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø
                            </p>
                        </div>
                    </div>

                    <DialogFooter className="gap-2">
                        <Button
                            variant="outline"
                            onClick={handleCloseModal}
                            disabled={isLoading}
                        >
                            ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
                        </Button>
                        <Button
                            onClick={handlePaymentSubmit}
                            disabled={isLoading || !paymentMethod}
                            className="flex-1"
                        >
                            {isLoading ? (
                                <>
                                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                                    ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç...
                                </>
                            ) : (
                                '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®'
                            )}
                        </Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </>
    );
};

export default MembershipPage;